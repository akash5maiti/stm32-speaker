#include "main.h"
#include "stm32f1xx_hal.h"
#include "i2c.h"
#include "gpio.h"
#include "adc.h"

// Function Prototypes
void SystemClock_Config(void);
void Error_Handler(void);
void PlayAudioSource(uint8_t source);
void CheckBatteryStatus(void);

#define SOURCE_BT  0
#define SOURCE_FM  1

int main(void)
{
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_I2C1_Init();
    MX_ADC1_Init();
    
    uint8_t currentSource = SOURCE_BT;

    while (1)
    {
        // Example: Switch to Bluetooth
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
        {
            currentSource = SOURCE_BT;
            PlayAudioSource(currentSource);
        }
        // Example: Switch to FM
        else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_SET)
        {
            currentSource = SOURCE_FM;
            PlayAudioSource(currentSource);
        }
        
        CheckBatteryStatus(); // Check battery status regularly
        
        HAL_Delay(100);
    }
}

void PlayAudioSource(uint8_t source)
{
    switch (source)
    {
    case SOURCE_BT:
        // Logic to enable Bluetooth module
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // Example pin to control Bluetooth module
        break;
    case SOURCE_FM:
        // Logic to enable FM module
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // Example pin to control FM module
        break;
    default:
        break;
    }
}

void CheckBatteryStatus(void)
{
    // Read battery voltage using ADC and display or act on low battery
    uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
    float batteryVoltage = (adcValue / 4096.0) * 3.3 * (R1 + R2) / R2; // Adjust based on resistor divider
    if (batteryVoltage < 3.0)
    {
        // Handle low battery (e.g., reduce power consumption, alert user)
    }
}

void SystemClock_Config(void)
{
    // System Clock Configuration generated by STM32CubeMX
}

void Error_Handler(void)
{
    while(1)
    {
        // Stay here
    }
}
